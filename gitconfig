[user]
  name = Thorsten Lorenz
  email = thlorenz@gmx.de
[core]
  editor = nvim
  excludesfile = /Users/thlorenz/.gitignore
[core "diff"]
  tool = vimdiff
[mergetool "vimdiff"]
  cmd = nvim -d $LOCAL $BASE -c '$wincmd w'

[color]
  diff = true
  ui = always
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = red
  untracked = blue

[diff]
  tool = vimdiff

[merge]
  tool = vimdiff
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[difftool]
  prompt = false

[branch "master"]
  # Use `origin` as the default remote on the `master` branch in all cases
  remote = origin
  merge = refs/heads/master

[push]
  default = current

[alias]
  # Lots came from:
  #   http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
  #   http://lukas.zapletalovi.com/2012/07/my-git-aliases-again.html

  # List all aliases
  al = "!git config -l | grep alias | cut -c 7-"

  # Logs

    ## Summary with relative dates
  lg = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%an%d%Creset %s %Cgreen(%cr)%Creset' --date=relative
    # Summary with full dates as first
  ld = log --pretty=format:'%Cblue%ad%Creset | %s [ %Cred%h%Creset %C(yellow)%an%d%Creset ]' --date=format:'%Y-%m-%d %H:%M:%S'
  ldd = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%an%d%Creset %s %Cgreen(%ad)%Creset' --date=format:'%Y-%m-%d %H:%M:%S'

    ## Very short summary (not authors or dates)
  ls = log --oneline --decorate

    ## Details (includes changed files)
  ll = log --pretty=format:'%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]' --decorate --numstat

    ## Details of specific revision
  llr  = "!f() { git ll "$1"^.."$1"; }; f"

    ## Summary without Colors to allow piping
  lnc = log --pretty=format:'%h\\ %s\\ [%cn]'

    ## Log differences between master and current branch (i.e. history since branching)
  lh = !git --no-pager log origin/master..HEAD --abbrev-commit --pretty=oneline

  # Diffs

    ## Show modified files in last commit
  dl = !git ll -1

    ## Show diff of last commit
  dlc = diff --cached HEAD^

    ## Show diff of specific revision
    ## Example: git dr HEAD~2
  dr = "!f() { git diff "$1"^.."$1"; }; f"
  dtr = "!f() { git difftool "$1"^.."$1"; }; f"

  dt = difftool
  dc = diff --cached

  # Grep

    ## Find filepath in codebase
  f = "!git ls-files | grep -i"

  # Remotes

    ## Push origin/master showing differences and allowing abort
  pom = !sh -c 'git lh && echo Ready to push? ENTER && read && git push origin master' -

  ra  =  remote add
  rr  =  remote remove
  rsu =  remote set-url

  pu  =  pull
  pur =  pull --rebase

  cl  =  clone

  # Workflow

  st  = status --ignore-submodules -s
  co  = checkout
  ci  = commit
  cm  = commit -m
  cam = commit -am
  br  = branch -v
  amd = commit --amend --no-edit
  up  = pull --rebase

  ## Merging
  mx = "!f() { git merge $1; git branch -d $1; }; f"

  ## Rebasing
  bip = rebase -i --committer-date-is-author-date
  bi = rebase -i
  bc = rebase --continue 
  ba = rebase --abort 

  cleanup = "!git branch --no-color --merged | grep  -v '\\*\\|master\\|develop\\|main' | xargs -n 1 git branch -d"

[mergetool]
  keepBackup = true
[credential]
  helper = osxkeychain
[filter "media"]
  clean = git-media-clean %f
  smudge = git-media-smudge %f
[rerere]
  enabled = false
  autoupdate = true
[fetch]
  prune = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[init]
	defaultBranch = master
[pull]
	ff = only
